<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>http://localhost:55042/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Jan 2025 15:40:00 -0600</lastBuildDate><atom:link href="http://localhost:55042/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Git Reset</title>
    <link>http://localhost:55042/posts/git_reset/</link>
    <pubDate>Wed, 01 Jan 2025 15:40:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/git_reset/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <a href="/posts/git_commit" rel="">last post</a> in our series on git discussed the structure
and importance of git commits. Ideally, every commit you make would be clear,
concise, small, logical, and self-contained. Unfortunately, reality rarely
allows us to know ahead of time what exactly will end up becoming a perfect
commit. You may commit the first step in your feature, and come to realize while
you are working on the next step that your first commit is not quite right. Or
maybe you notice a simple typo in the work you just committed.</p>]]></description>
</item>
<item>
    <title>Zellij</title>
    <link>http://localhost:55042/posts/zellij/</link>
    <pubDate>Tue, 17 Dec 2024 17:09:32 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/zellij/</guid>
    <description><![CDATA[<h2 id="the-modern-terminal-multiplexer">The Modern Terminal Multiplexer</h2>
<h2 id="introdution">Introdution</h2>
<p>What on earth is a terminal multiplexer, and why would you want/need one?</p>]]></description>
</item>
<item>
    <title>What Makes a Good Git Commit</title>
    <link>http://localhost:55042/posts/git_commit/</link>
    <pubDate>Tue, 13 Aug 2024 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/git_commit/</guid>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I want to kick off this series of articles on git with the humble commit.
Commits are the basic unit of change in your codebase. Like an atom, you cannot
break things down any further than a commit<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Git automatically keeps track
of which files were changed, who changed them, and when. It is up to YOU,
however, to decide what information is added to that commit to give context to
others or your future self about the changes.</p>]]></description>
</item>
<item>
    <title>zoxide</title>
    <link>http://localhost:55042/posts/zoxide/</link>
    <pubDate>Fri, 19 Jan 2024 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/zoxide/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p><a href="https://github.com/ajeetdsouza/zoxide" target="_blank" rel="noopener noreffer ">Zoxide</a> is a small and focused
command line tool that supercharges the
<a href="https://man7.org/linux/man-pages/man1/cd.1p.html" target="_blank" rel="noopener noreffer ">cd</a> command. Its goal
is to reduce repetitively typing out paths to directories you&rsquo;ve
already visited.</p>
<p>You can use it as a drop in replacement for cd and use it exactly how
you would use cd. Once installed, every time you change to a directory
with <code>z</code> (the name of the binary zoxide installs into your path) it
remembers the path for later. Later, it uses this history to parse <code>z</code>
paths using arbitrary fragments of that path.</p>]]></description>
</item>
<item>
    <title>Intro to Bash Scripting</title>
    <link>http://localhost:55042/posts/intro_to_bash_scripting/</link>
    <pubDate>Fri, 22 Dec 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/intro_to_bash_scripting/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p>Bash is a (perhaps <em>the</em> ubiquitous) shell. As a member of the POSIX
interface, bash provides a consistent access point to applications on
your operating system.</p>
<p>Because it is all but guaranteed to be installed on any server and
environment, learning this one interface will ensure you can be
comfortable interacting with any computer.</p>
<p>Before we begin, it will be helpful to clear up a few ambiguous terms
related to command line tools that often come up together. A <em>terminal</em>
is a desktop application you start which presents you with a <em>command
line</em> interface, running your chosen <em>shell</em>.</p>]]></description>
</item>
<item>
    <title>fzf</title>
    <link>http://localhost:55042/posts/fzf/</link>
    <pubDate>Thu, 14 Dec 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/fzf/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p>Without any arguments or data piped from standard input
<a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener noreffer ">fzf</a> acts as a sort of interactive
<a href="https://man7.org/linux/man-pages/man1/find.1.html" target="_blank" rel="noopener noreffer ">find</a> by listing every file
in the current and all sub-directories.</p>
<p></p>
<p>As you can see, the options are filtered live as you type. Spaces start a new
search term which can match any part of the file regardless of the order you
type them in. You can use <code>!</code> to negate a search term and filter out items which
match that term.</p>]]></description>
</item>
<item>
    <title>jq</title>
    <link>http://localhost:55042/posts/jq/</link>
    <pubDate>Fri, 08 Dec 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/jq/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p><a href="https://jqlang.github.io/jq/" target="_blank" rel="noopener noreffer ">jq</a> is a utility to search through, filter, and
modify <code>json</code> content.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> You can use it to find a value in a deeply nested
object, filter to only objects which contain a field, map the inner contents of
arbitrary data into a flat list, and much much more.</p>
<p>On mac, it can be installed through homebrew:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install jq</span></span></code></pre></div></div>
<p>As an introductory example, say you have the following json input:<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>]]></description>
</item>
<item>
    <title>nb</title>
    <link>http://localhost:55042/posts/nb/</link>
    <pubDate>Fri, 01 Dec 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/nb/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p><a href="https://xwmx.github.io/nb" target="_blank" rel="noopener noreffer ">nb</a> is a swiss army knife of a note taking tool
operated entirely<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> in within the command line.</p>
<p>The <code>nb</code> command is your launch pad for everything note related. Without
arguments <code>nb</code> shows you an overview of your existing notes or a quick cheat
sheet of common actions if there are no notes.</p>
<p></p>
<p>Once you&rsquo;ve created a few notes, <code>nb</code> (without arguments) instead displays all
the notes in your current notebook (more on <a href="#Notebooks" rel="">notebooks</a> later)</p>]]></description>
</item>
<item>
    <title>sed (part 2)</title>
    <link>http://localhost:55042/posts/sed_part_2/</link>
    <pubDate>Fri, 17 Nov 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/sed_part_2/</guid>
    <description><![CDATA[<h2 id="overview">overview</h2>
<p><a href="/posts/sed" rel="">last</a> time we discussed the command line utility, <code>sed</code>. as a
stream editor, <code>sed</code> provides a programmatic way to edit files or streams of
data. rather than opening up a full-fledged, interactive text editor or ide you
can reach for <code>sed</code>.</p>
<p>this is particularily useful when you need to make repetative edits over many
lines, or only on particular lines. <code>sed</code> is also useful for general purpose use
cases when viewing parts of files or trimming and cleaning up data.</p>]]></description>
</item>
<item>
    <title>Sed (Part 1)</title>
    <link>http://localhost:55042/posts/sed/</link>
    <pubDate>Fri, 10 Nov 2023 16:00:00 -0600</pubDate>
    <author>xxxx</author>
    <guid>http://localhost:55042/posts/sed/</guid>
    <description><![CDATA[<h2 id="overview">Overview</h2>
<p><a href="https://man7.org/linux/man-pages/man1/sed.1.html" target="_blank" rel="noopener noreffer ">Sed</a> stands for (s)tream
(ed)itor and is useful for taking any input you have and modifying it in some
way before sending it along as output, either to the console or as input to the
next command in your pipeline. It operates on each line of your input, executing
some command on each as the input is read.</p>
<p>Chances are if you&rsquo;ve encountered <code>sed</code> before, it came from some sage linux
master on stack overflow when providing an answer to a bash scripting question.
If you&rsquo;ve used <code>sed</code> yourself for some task, it&rsquo;s likely using the <code>substitute</code>
command to find and replace some search term.</p>]]></description>
</item>
</channel>
</rss>
